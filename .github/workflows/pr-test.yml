name: PR Tests

on:
  pull_request:
    branches: [ main ]

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Verify dependencies
        run: go mod verify
        
      - name: Check tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install JS dependencies
        run: npm install -g prettier standard markdownlint-cli
        
      - name: Run Go linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m
          
      - name: Run Prettier
        run: npx prettier --check .
        
      - name: Run Markdown lint
        run: npx markdownlint .
        
      - name: Run JS lint
        run: npx standard

  test:
    runs-on: ubuntu-latest
    needs: [validate, lint]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Run unit tests
        run: go test -v -race -coverprofile=coverage.out ./...
        
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Build all architectures
        run: |
          mkdir -p dist
          
          # Linux
          GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o dist/gha-linux-amd64 .
          GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o dist/gha-linux-arm64 .
          GOOS=linux GOARCH=386 go build -ldflags="-s -w" -o dist/gha-linux-386 .
          
          # Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o dist/gha-windows-amd64.exe .
          GOOS=windows GOARCH=arm64 go build -ldflags="-s -w" -o dist/gha-windows-arm64.exe .
          GOOS=windows GOARCH=386 go build -ldflags="-s -w" -o dist/gha-windows-386.exe .
          
          # macOS
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o dist/gha-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -o dist/gha-darwin-arm64 .
          
          # FreeBSD
          GOOS=freebsd GOARCH=amd64 go build -ldflags="-s -w" -o dist/gha-freebsd-amd64 .
          
      - name: Upload all binaries
        uses: actions/upload-artifact@v4
        with:
          name: gha-binaries
          path: dist/*
          
  comment:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
    steps:
      - name: Comment PR with download links
        uses: actions/github-script@v7
        with:
          script: |
            const runId = context.runId;
            const repo = context.repo;
            
            // Get artifact ID
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: repo.owner,
              repo: repo.repo,
              run_id: runId
            });
            
            const artifact = artifacts.data.artifacts.find(a => a.name === 'gha-binaries');
            const artifactId = artifact ? artifact.id : 'unknown';
            
            const baseUrl = `https://nightly.link/${repo.owner}/${repo.repo}/actions/artifacts/${artifactId}.zip`;
            
            const comment = `## ðŸš€ PR Build Complete!
            
            Test the changes by downloading the binaries for your platform:
            
            ### Download Links
            
            **ðŸ“¦ [Download All Binaries (ZIP)](${baseUrl})**
            
            | Platform | Architecture | File Name |
            |----------|--------------|----------|
            | Linux | x64 | \`gha-linux-amd64\` |
            | Linux | ARM64 | \`gha-linux-arm64\` |
            | Linux | x86 | \`gha-linux-386\` |
            | Windows | x64 | \`gha-windows-amd64.exe\` |
            | Windows | ARM64 | \`gha-windows-arm64.exe\` |
            | Windows | x86 | \`gha-windows-386.exe\` |
            | macOS | Intel | \`gha-darwin-amd64\` |
            | macOS | Apple Silicon | \`gha-darwin-arm64\` |
            | FreeBSD | x64 | \`gha-freebsd-amd64\` |
            
            ### Quick Test
            \`\`\`bash
            # Download, extract, and test
            unzip gha-binaries.zip
            chmod +x gha-linux-amd64
            ./gha-linux-amd64 --version
            \`\`\`
            
            > ðŸ’¡ Download the ZIP file above - it contains all platform binaries.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: repo.owner,
              repo: repo.repo,
              body: comment
            });

  integration:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      
      - name: Download binaries
        uses: actions/download-artifact@v4
        with:
          name: gha-binaries
          path: dist/
          
      - name: Make binary executable
        run: chmod +x dist/gha-linux-amd64
        
      - name: Test basic functionality
        run: |
          ./dist/gha-linux-amd64 --version
          ./dist/gha-linux-amd64 --help
          
      - name: Test with real workflow
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/test.yml << 'EOF'
          name: Test
          on: push
          jobs:
            test:
              runs-on: ubuntu-latest
              steps:
                - run: echo "Testing gha"
                - run: pwd
          EOF
          ./dist/gha-linux-amd64 --dryrun
          
      - name: Test with existing testdata
        run: |
          cd pkg/runner/testdata/basic
          ../../../../dist/gha-linux-amd64 --dryrun

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'
          
      - name: Run Gosec
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
          
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
          
      - name: Run Nancy (dependency vulnerability scanner)
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth

  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t gha:test .
        
      - name: Test Docker image
        run: |
          docker run --rm gha:test --version
          docker run --rm gha:test --help
